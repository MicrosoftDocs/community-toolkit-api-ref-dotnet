<Type Name="NotifyCanExecuteChangedForAttribute" FullName="CommunityToolkit.Mvvm.ComponentModel.NotifyCanExecuteChangedForAttribute">
  <TypeSignature Language="C#" Value="public sealed class NotifyCanExecuteChangedForAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit NotifyCanExecuteChangedForAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:CommunityToolkit.Mvvm.ComponentModel.NotifyCanExecuteChangedForAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class NotifyCanExecuteChangedForAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="F#" Value="type NotifyCanExecuteChangedForAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>CommunityToolkit.Mvvm</AssemblyName>
    <AssemblyVersion>8.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Field | System.AttributeTargets.Property, AllowMultiple=true, Inherited=false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Field | System.AttributeTargets.Property, AllowMultiple=true, Inherited=false)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
             An attribute that can be used to support <see cref="T:CommunityToolkit.Mvvm.Input.IRelayCommand" /> properties in generated properties. When this attribute is
             used, the generated property setter will also call <see cref="M:CommunityToolkit.Mvvm.Input.IRelayCommand.NotifyCanExecuteChanged" /> for the properties specified
             in the attribute data, causing the validation logic for the command to be executed again. This can be useful to keep the code compact
             when there are one or more dependent commands that should also be notified when a property is updated. If this attribute is used on
             a property without <see cref="T:CommunityToolkit.Mvvm.ComponentModel.ObservablePropertyAttribute" />, it is ignored (just like <see cref="T:CommunityToolkit.Mvvm.ComponentModel.NotifyPropertyChangedForAttribute" />).
             <para>
             In order to use this attribute, the target property has to implement the <see cref="T:CommunityToolkit.Mvvm.Input.IRelayCommand" /> interface.
             </para><para>
             This attribute can be used as follows:
             <code>
             partial class MyViewModel : ObservableObject
             {
                 [ObservableProperty]
                 [NotifyCanExecuteChangedFor(nameof(GreetUserCommand))]
                 public partial string Name { get; set; }
            
                 public IRelayCommand GreetUserCommand { get; }
             }
             </code></para>
             And with this, code analogous to this will be generated:
             <code>
             partial class MyViewModel
             {
                 public partial string Name
                 {
                     get =&gt; field;
                     set
                     {
                         if (SetProperty(ref field, value))
                         {
                             GreetUserCommand.NotifyCanExecuteChanged();
                         }
                     }
                 }
             }
             </code></summary>
    <remarks>
             Just like <see cref="T:CommunityToolkit.Mvvm.ComponentModel.ObservablePropertyAttribute" />, this attribute can also be used on fields as well.
             </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NotifyCanExecuteChangedForAttribute (string commandName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string commandName) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.Mvvm.ComponentModel.NotifyCanExecuteChangedForAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (commandName As String)" />
      <MemberSignature Language="F#" Value="new CommunityToolkit.Mvvm.ComponentModel.NotifyCanExecuteChangedForAttribute : string -&gt; CommunityToolkit.Mvvm.ComponentModel.NotifyCanExecuteChangedForAttribute" Usage="new CommunityToolkit.Mvvm.ComponentModel.NotifyCanExecuteChangedForAttribute commandName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.Mvvm</AssemblyName>
        <AssemblyVersion>8.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="commandName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="commandName">The name of the command to also notify when the annotated property changes.</param>
        <summary>
            Initializes a new instance of the <see cref="T:CommunityToolkit.Mvvm.ComponentModel.NotifyCanExecuteChangedForAttribute" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NotifyCanExecuteChangedForAttribute (string commandName, params string[] otherCommandNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string commandName, string[] otherCommandNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.Mvvm.ComponentModel.NotifyCanExecuteChangedForAttribute.#ctor(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (commandName As String, ParamArray otherCommandNames As String())" />
      <MemberSignature Language="F#" Value="new CommunityToolkit.Mvvm.ComponentModel.NotifyCanExecuteChangedForAttribute : string * string[] -&gt; CommunityToolkit.Mvvm.ComponentModel.NotifyCanExecuteChangedForAttribute" Usage="new CommunityToolkit.Mvvm.ComponentModel.NotifyCanExecuteChangedForAttribute (commandName, otherCommandNames)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.Mvvm</AssemblyName>
        <AssemblyVersion>8.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="commandName" Type="System.String" />
        <Parameter Name="otherCommandNames" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="commandName">The name of the property to also notify when the annotated property changes.</param>
        <param name="otherCommandNames">
            The other command names to also notify when the annotated property changes. This parameter can optionally
            be used to indicate a series of dependent commands from the same attribute, to keep the code more compact.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:CommunityToolkit.Mvvm.ComponentModel.NotifyCanExecuteChangedForAttribute" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandNames">
      <MemberSignature Language="C#" Value="public string[] CommandNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] CommandNames" />
      <MemberSignature Language="DocId" Value="P:CommunityToolkit.Mvvm.ComponentModel.NotifyCanExecuteChangedForAttribute.CommandNames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandNames As String()" />
      <MemberSignature Language="F#" Value="member this.CommandNames : string[]" Usage="CommunityToolkit.Mvvm.ComponentModel.NotifyCanExecuteChangedForAttribute.CommandNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.Mvvm</AssemblyName>
        <AssemblyVersion>8.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the command names to also notify when the annotated property changes.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>

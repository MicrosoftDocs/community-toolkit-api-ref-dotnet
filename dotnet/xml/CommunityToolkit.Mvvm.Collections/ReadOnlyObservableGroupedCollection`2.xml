<Type Name="ReadOnlyObservableGroupedCollection&lt;TKey,TElement&gt;" FullName="CommunityToolkit.Mvvm.Collections.ReadOnlyObservableGroupedCollection&lt;TKey,TElement&gt;">
  <TypeSignature Language="C#" Value="public sealed class ReadOnlyObservableGroupedCollection&lt;TKey,TElement&gt; : System.Collections.ObjectModel.ReadOnlyObservableCollection&lt;CommunityToolkit.Mvvm.Collections.ReadOnlyObservableGroup&lt;TKey,TElement&gt;&gt;, System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;, System.Linq.ILookup&lt;TKey,TElement&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ReadOnlyObservableGroupedCollection`2&lt;TKey, TElement&gt; extends System.Collections.ObjectModel.ReadOnlyObservableCollection`1&lt;class CommunityToolkit.Mvvm.Collections.ReadOnlyObservableGroup`2&lt;!TKey, !TElement&gt;&gt; implements class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!TKey, !TElement&gt;&gt;, class System.Collections.IEnumerable, class System.Linq.ILookup`2&lt;!TKey, !TElement&gt;" />
  <TypeSignature Language="DocId" Value="T:CommunityToolkit.Mvvm.Collections.ReadOnlyObservableGroupedCollection`2" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ReadOnlyObservableGroupedCollection(Of TKey, TElement)&#xA;Inherits ReadOnlyObservableCollection(Of ReadOnlyObservableGroup(Of TKey, TElement))&#xA;Implements IEnumerable(Of IGrouping(Of TKey, TElement)), ILookup(Of TKey, TElement)" />
  <TypeSignature Language="F#" Value="type ReadOnlyObservableGroupedCollection&lt;'Key, 'Element&gt; = class&#xA;    inherit ReadOnlyObservableCollection&lt;ReadOnlyObservableGroup&lt;'Key, 'Element&gt;&gt;&#xA;    interface ILookup&lt;'Key, 'Element&gt;&#xA;    interface seq&lt;IGrouping&lt;'Key, 'Element&gt;&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>CommunityToolkit.Mvvm</AssemblyName>
    <AssemblyVersion>8.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TElement" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Collections.ObjectModel.ReadOnlyObservableCollection&lt;CommunityToolkit.Mvvm.Collections.ReadOnlyObservableGroup&lt;TKey,TElement&gt;&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">CommunityToolkit.Mvvm.Collections.ReadOnlyObservableGroup&lt;TKey,TElement&gt;</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.ILookup&lt;TKey,TElement&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TKey">The type of the group keys.</typeparam>
    <typeparam name="TElement">The type of elements in the collection.</typeparam>
    <summary>
            A read-only list of groups.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlyObservableGroupedCollection (System.Collections.ObjectModel.ObservableCollection&lt;CommunityToolkit.Mvvm.Collections.ObservableGroup&lt;TKey,TElement&gt;&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.ObjectModel.ObservableCollection`1&lt;class CommunityToolkit.Mvvm.Collections.ObservableGroup`2&lt;!TKey, !TElement&gt;&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.Mvvm.Collections.ReadOnlyObservableGroupedCollection`2.#ctor(System.Collections.ObjectModel.ObservableCollection{CommunityToolkit.Mvvm.Collections.ObservableGroup{`0,`1}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As ObservableCollection(Of ObservableGroup(Of TKey, TElement)))" />
      <MemberSignature Language="F#" Value="new CommunityToolkit.Mvvm.Collections.ReadOnlyObservableGroupedCollection&lt;'Key, 'Element&gt; : System.Collections.ObjectModel.ObservableCollection&lt;CommunityToolkit.Mvvm.Collections.ObservableGroup&lt;'Key, 'Element&gt;&gt; -&gt; CommunityToolkit.Mvvm.Collections.ReadOnlyObservableGroupedCollection&lt;'Key, 'Element&gt;" Usage="new CommunityToolkit.Mvvm.Collections.ReadOnlyObservableGroupedCollection&lt;'Key, 'Element&gt; collection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.Mvvm</AssemblyName>
        <AssemblyVersion>8.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.ObjectModel.ObservableCollection&lt;CommunityToolkit.Mvvm.Collections.ObservableGroup&lt;TKey,TElement&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="collection">The source collection to wrap.</param>
        <summary>
            Initializes a new instance of the <see cref="T:CommunityToolkit.Mvvm.Collections.ReadOnlyObservableGroupedCollection`2" /> class.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:CommunityToolkit.Mvvm.ArgumentNullException">Thrown if <paramref name="collection" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlyObservableGroupedCollection (System.Collections.ObjectModel.ObservableCollection&lt;CommunityToolkit.Mvvm.Collections.ReadOnlyObservableGroup&lt;TKey,TElement&gt;&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.ObjectModel.ObservableCollection`1&lt;class CommunityToolkit.Mvvm.Collections.ReadOnlyObservableGroup`2&lt;!TKey, !TElement&gt;&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.Mvvm.Collections.ReadOnlyObservableGroupedCollection`2.#ctor(System.Collections.ObjectModel.ObservableCollection{CommunityToolkit.Mvvm.Collections.ReadOnlyObservableGroup{`0,`1}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As ObservableCollection(Of ReadOnlyObservableGroup(Of TKey, TElement)))" />
      <MemberSignature Language="F#" Value="new CommunityToolkit.Mvvm.Collections.ReadOnlyObservableGroupedCollection&lt;'Key, 'Element&gt; : System.Collections.ObjectModel.ObservableCollection&lt;CommunityToolkit.Mvvm.Collections.ReadOnlyObservableGroup&lt;'Key, 'Element&gt;&gt; -&gt; CommunityToolkit.Mvvm.Collections.ReadOnlyObservableGroupedCollection&lt;'Key, 'Element&gt;" Usage="new CommunityToolkit.Mvvm.Collections.ReadOnlyObservableGroupedCollection&lt;'Key, 'Element&gt; collection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.Mvvm</AssemblyName>
        <AssemblyVersion>8.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.ObjectModel.ObservableCollection&lt;CommunityToolkit.Mvvm.Collections.ReadOnlyObservableGroup&lt;TKey,TElement&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="collection">The source collection to wrap.</param>
        <summary>
            Initializes a new instance of the <see cref="T:CommunityToolkit.Mvvm.Collections.ReadOnlyObservableGroupedCollection`2" /> class.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:CommunityToolkit.Mvvm.ArgumentNullException">Thrown if <paramref name="collection" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; IEnumerable&lt;IGrouping&lt;TKey,TElement&gt;&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.Linq.IGrouping`2&lt;!TKey, !TElement&gt;&gt; System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.Mvvm.Collections.ReadOnlyObservableGroupedCollection`2.System#Collections#Generic#IEnumerable&lt;System#Linq#IGrouping&lt;TKey,TElement&gt;&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of IGrouping(Of TKey, TElement)) Implements IEnumerable(Of IGrouping(Of TKey, TElement)).GetEnumerator" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Linq.IGrouping&lt;'Key, 'Element&gt;&gt;&#xA;override this.System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Linq.IGrouping&lt;'Key, 'Element&gt;&gt;" Usage="readOnlyObservableGroupedCollection.System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.Mvvm</AssemblyName>
        <AssemblyVersion>8.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="System.Linq.ILookup&lt;TKey,TElement&gt;.Contains">
      <MemberSignature Language="C#" Value="bool ILookup&lt;TKey,TElement&gt;.Contains (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Linq.ILookup&lt;TKey,TElement&gt;.Contains(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:CommunityToolkit.Mvvm.Collections.ReadOnlyObservableGroupedCollection`2.System#Linq#ILookup&lt;TKey,TElement&gt;#Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (key As TKey) As Boolean Implements ILookup(Of TKey, TElement).Contains" />
      <MemberSignature Language="F#" Value="abstract member System.Linq.ILookup&lt;TKey,TElement&gt;.Contains : 'Key -&gt; bool&#xA;override this.System.Linq.ILookup&lt;TKey,TElement&gt;.Contains : 'Key -&gt; bool" Usage="readOnlyObservableGroupedCollection.System.Linq.ILookup&lt;TKey,TElement&gt;.Contains key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Linq.ILookup`2.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.Mvvm</AssemblyName>
        <AssemblyVersion>8.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="System.Linq.ILookup&lt;TKey,TElement&gt;.Item">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;TElement&gt; System.Linq.ILookup&lt;TKey,TElement&gt;.Item[TKey key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;!TElement&gt; System.Linq.ILookup&lt;TKey,TElement&gt;.Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:CommunityToolkit.Mvvm.Collections.ReadOnlyObservableGroupedCollection`2.System#Linq#ILookup&lt;TKey,TElement&gt;#Item(`0)" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(key As TKey) As IEnumerable(Of TElement) Implements ILookup(Of TKey, TElement).Item" />
      <MemberSignature Language="F#" Value="member this.System.Linq.ILookup&lt;TKey,TElement&gt;.Item('Key) : seq&lt;'Element&gt;" Usage="System.Linq.ILookup&lt;TKey,TElement&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Linq.ILookup`2.Item(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>CommunityToolkit.Mvvm</AssemblyName>
        <AssemblyVersion>8.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
